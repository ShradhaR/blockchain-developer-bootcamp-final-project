// SPDX-License-Identifier: MIT
pragma solidity 0.8.10;

import "@openzeppelin/contracts/access/Ownable.sol";

/**
* @title Tipping Smart Contract
*
* @dev @notice This contract allows :
*               1. Enable tip transfer in the form of ether from one account to another account.
*               2. Keep records for each tip transfer as tiptransferId. tiptransferId is generated by hashing combination of sender address, receiver address, amount, timestamp.
*               3. View account balance for both sender and receiver of the tip transcation.
*
* @author Shradha Rajmane
*
*/
contract Tipping is Ownable 
{
  
  enum State { None, Initiated, Confirmed }

  struct TipTransfer {
        address payable FromAddress;
        address payable ToAddress;
        uint256 amount;
        State state;
        uint timestamp;
    }
    
  ///

  uint tiptransferId;

  /// @dev The tiptransferId (key) and TipTransfer object (value) are initialized on the mapping (hash table).
  mapping (uint => TipTransfer) tip_transfer_records;

  /// @notice Emitted when a user initate the tip transfer.
  /// @param from sender address
  /// @param to receiver's address
  event TransferInitiated(address from, address to);

  /// @notice Emitted when a tip transfer completes.
  /// @param from sender address
  event TransferConfirmed(address from);

  constructor() public 
  {  tiptransferId = 0; } 

  /// @notice @dev Initiate Tip transfer on the blockchain
  /// @param _to receiver's address
  /// @param amt Tip amount to transfer in ether
  function TipTransferInitiated(address payable _to, uint256 amt) public payable 
  returns(uint)
  {
    //bytes32 _tiptransferId = setTipTransferId(msg.sender,_to,amt);
    //TipTransfer storage tiptransfer = tip_transfers[_tiptransferId];

    // if (tiptransfer.state != State.None) return 0;
    tip_transfer_records[tiptransferId] = TipTransfer({
    FromAddress    : payable(msg.sender),
    ToAddress      : _to,
    amount         : amt,
    state          : State.Initiated,
    timestamp	     : block.timestamp });
         
    //tip_transfer_records[tiptransferId].ToAddress.transfer(amt);
    address(_to).transfer(amt);
    //tip_transfer_records.push(tip_transfer_records[tiptransferId]);
    // address owner = owner();
    // (bool success, ) = owner.call{ value: msg.value }("");
    // require(success, "Tipping transaction initialization failed.");
    // Notify the receiver that the transfer is requested
    emit TransferInitiated(msg.sender, _to);
    return tiptransferId++;
  }

  /// @notice @dev Confirms Tip transfer to the sender.
  function confirmTransfer() public returns (bool) 
  {
    //TipTransfer tiptransfer = tip_transfers[tiptransferId];
    if (msg.sender != tip_transfer_records[tiptransferId].FromAddress || 
         tip_transfer_records[tiptransferId].state != State.Initiated) 
      return false;
        
    tip_transfer_records[tiptransferId].state = State.Confirmed;
    emit TransferConfirmed(tip_transfer_records[tiptransferId].FromAddress);       
    return true;
  }

  /// @notice @dev Fallback function - Called if other functions don't match call or sent ether without data.
  fallback () external payable 
  {
    revert("fallback function");
  }
  receive() external payable 
  {
    revert("receive function");
  }

  
  /// @notice @dev Get the balance of the sender or receiver of this transaction.
  /// @param _tiptransferId universally-unique identifier (UUID)
  /// @return amt tip amount
  function getTipAmount(uint _tiptransferId) public view returns (uint amt) 
  {
    //TipTransfer storage tiptransfer = tip_transfers[tiptransferId];
    if (msg.sender != tip_transfer_records[_tiptransferId].ToAddress && 
        msg.sender != tip_transfer_records[_tiptransferId].FromAddress) 
      return 0;
    return tip_transfer_records[_tiptransferId].amount;
  }

  /// @dev get balance of an account
  /// @param account the account address
  /// @return balance account balance
  function getBalance(address account) public view returns (uint256 balance) 
  {
        return account.balance;
  }

  /// @notice @dev Get the sender address.
  /// @param _tiptransferId unique identifier (UID)
  /// @return sender address
  function getSenderAddress(uint _tiptransferId) public view returns (address) 
  {
      return tip_transfer_records[_tiptransferId].FromAddress;
  }

  /// @notice @dev Get the receiver address.
  /// @param _tiptransferId unique identifier (UID)
  /// @return receiver address
  function getReceiverAddress(uint _tiptransferId) public view returns (address) 
  {
    return tip_transfer_records[_tiptransferId].ToAddress;
  }

  /// @notice @dev Get the transfer state
  /// @param _tiptransferId unique identifier (UID)
  /// @return transfer transcation state 
  function getState(uint _tiptransferId) public view returns (State) 
  {
    return tip_transfer_records[_tiptransferId].state;
  }
}
